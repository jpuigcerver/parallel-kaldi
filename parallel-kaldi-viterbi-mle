#!/bin/bash
set -e;
export LC_NUMERIC=C;

### Script directory.
SDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
### Load useful functions.
. "${SDIR}/parallel-kaldi-functions.inc.sh" || ( \
    echo "ERROR: Sourcing file \"${SDIR}/parallel-kaldi-functions.inc.sh\"" >&2 && exit 1);

# Options for gmm-align-compiled
acoustic_scale=1.0;
align_equal=true;
beam=10000;
careful=false;
retry_beam=0;
self_loop_scale=1.0;
transition_scale=1.0;
# Options for gmm-est
min_gaussian_occupancy=10;
min_gaussian_weight=0.00001;
min_variance=0.001;
remove_low_count_gaussians=true;
share_for_pdfs=false;
transition_floor=0.01;
transition_min_count=5;
update_flags=mvwt;
# MLE iterations
mle_iterations=10;
# QSub options
qsub=false;
qsub_opts="-l h_rt=24:00:00,h_vmem=4G";
# Options for this script
overwrite=false;
clean=false;
help_message="
Usage: parallel-kaldi-viterbi-mle [options] fst1_rspec fea1_rspec
                                  [fst2_rspec fea2_rspec ...]
                                  init_mdl work_dir

Description:
   Perform Maximum Likelihood Estimation of GMM-based acoustic model using
   the statistics from a Viterbi forced alignment.

   e.g: parallel-kaldi-viterbi-mle ark:train.fst.1 ark:train.fea.1 \\
        ark:train.fst.2 ark:train.fea.2 init_mdl output_dir

Options:
  --acoustic_scale             : (float, default = $acoustic_scale)
                                 Scaling factor for acoustic likelihoods.
  --align_equal                : (boolean, default = $align_equal)
                                 Perform equal alignment instead of Viterbi
                                 alignment in the first iteration. This is
                                 useful when the initial model was not
                                 initialized before.
  --beam                       : (float, default = $beam)
                                 Decoding beam used in alignment.
  --careful                    : (boolean, default = $careful)
                                 If true, do 'careful' alignment, which is
                                 better at detecting alignment failure
                                 (involves loop to start of decoding graph).
  --clean                      : (boolean, default = $clean)
                                 Clean temporal accumulated statistics files
                                 after the MLE.
  --config                     : (string, default = \"\")
                                 Read options from this config file. Multiple
                                 config files can be specified.
  --min_gaussian_occupancy     : (float, default = $min_gaussian_occupancy)
                                 Minimum occupancy to update a Gaussian.
  --min_gaussian_weight        : (float, default = $min_gaussian_weight)
                                 Minimum Gaussian weight before we remove it.
  --min_variance               : (float, default = $min_variance)
                                 Variance floor (absolute variance).
  --mle_iterations             : (integer, default = $mle_iterations)
                                 Number of Viterbi MLE iterations.
  --overwrite                  : (boolean, default = $overwrite)
                                 If true, overwrite previously created files.
  --qsub                       : (boolean, default = $qsub)
                                 If true, run jobs in a cluster using qsub
                                 instead of the local machine.
  --qsub_opts                  : (string, default = \"$qsub_opts\")
                                 Options passed to the qsub command. Note:
                                 -cwd and -t are automatically set.
  --remove_low_count_gaussians : (boolean, default = $remove_low_count_gaussians)
                                 If true, remove Gaussians that fall below the
                                 floors.
  --retry_beam                 : (float, default = $retry_beam)
                                 Decoding beam for second try at alignment.
  --self_loop_scale            : (float, default = $self_loop_scale)
                                 Scale of self-loop versus non-self-loop log
                                 probs (relative to acoustics).
  --share_for_pdfs             : (boolean, default = $share_for_pdfs)
                                 If true, share all transition parameters where
                                 the states have the same p.d.f.
  --transition_floor           : (float, default = $transition_floor)
                                 Floor for transition probabilities.
  --transition_min_count       : (float, default = $transition_min_count)
                                 Minimum count required to update transitions
                                 from a state.
  --transition_scale           : (float, default = $transition_scale)
                                 Transition-probability scale (relative to
                                 acoustics).
  --update_flags               : (string, default = \"$update_flags\")
                                 Which GMM parameters to update: subset of mvwt.
";
. "${SDIR}/parallel-kaldi-cmd-parse.inc.sh" || \
    error "Sourcing file \"${SDIR}/parallel-kaldi-cmd-parse.inc.sh\"";
[ $# -eq 0 ] && echo "$help_message" >&2 && exit 1;

fsts_and_feas=();
while [ $# -gt 2 ]; do fsts_and_feas+=("$1"); shift 1; done;
[ $# -ne 2 ] && error "Wrong number of arguments. Check the usage with --help";
[ ${#fsts_and_feas[@]} -lt 2 ] && \
    error "You must specify at least one training FST and feature file";
old_mdl="$1";
wdir="$2";

check_execs bc parallel-kaldi-viterbi-mle-iter gmm-info gmm-mixup;
make_dirs "$wdir";

# Check option values
[ "$mle_iterations" -gt 0 ] || \
    error "--mle_iterations must be an integer greater than 0!";

# Perform --mle_iterations iterations of the MLE with Viterbi alignment.
for k in $(seq 1 $mle_iterations); do
    msg "--- Viterbi MLE iteration $k (of $mle_iterations)";
    hold_jid=$(parallel-kaldi-viterbi-mle-iter \
	--align_equal \
	$(if [ $k = 1 ]; then echo $align_equal; else echo false; fi) \
	--acoustic_scale "$acoustic_scale" \
	--beam "$beam" --careful "$careful" --clean "$clean" \
	--min_gaussian_occupancy "$min_gaussian_occupancy" \
	--min_gaussian_weight "$min_gaussian_weight" \
	--min_variance "$min_variance" \
	--overwrite "$overwrite" \
        --qsub "$qsub" --qsub_opts "$qsub_opts $qsub_hold_jid" \
	--remove_low_count_gaussians "$remove_low_count_gaussians" \
	--retry_beam "$retry_beam" \
	--self_loop_scale "$self_loop_scale" \
	--share_for_pdfs "$share_for_pdfs" \
	--transition_floor "$transition_floor" \
	--transition_min_count "$transition_min_count" \
	--transition_scale "$transition_scale" \
	--update_flags "$update_flags" "${fsts_and_feas[@]}" \
	"$old_mdl" "${wdir}/it_${k}") || exit 1;
    # Point old_mdl to the newest model.
    old_mdl="${wdir}/it_${k}/mdl";
    # If running in qsub, next iteration must wait for the current one.
    [ -z "$hold_jid" ] || qsub_hold_jid="-hold_jid $hold_jid";
done;

# Print job id of the latest iteration, so scripts calling this can wait.
[ "$qsub" = true -a -n "$hold_jid" ] && echo "$hold_jid";

exit 0;
