#!/bin/bash
set -e;
export LC_NUMERIC=C;

### Script directory.
SDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
### Load useful functions.
. "${SDIR}/parallel-kaldi-functions.inc.sh" || ( \
    echo "ERROR: Sourcing file \"${SDIR}/parallel-kaldi-functions.inc.sh\"">&2 \
    && exit 1);

# Options for gmm-align-compiled
acoustic_scale=1.0;
align_equal=false;
beam=1000;
careful=false;
retry_beam=0;
self_loop_scale=1.0;
transition_scale=1.0;
# Options for gmm-est
min_gaussian_occupancy=10;
min_gaussian_weight=1e-05;
min_variance=0.001;
remove_low_count_gaussians=true;
share_for_pdfs=false;
transition_floor=0.01;
transition_min_count=5;
update_flags=mvwt;
# Generic options
overwrite=false;
clean=false;
help_message="
Usage: parallel-kaldi-mle-viterbi-iter-local [options] fst1_rspec fea1_rspec
                                             [fst2_rspec fea2_rspec ...]
                                             old_mdl work_dir

Description:
   Perform Maximum Likelihood Estimation of GMM-based acoustic model using
   the statistics from a Viterbi forced alignment.

   e.g: parallel-kaldi-mle-viterbi-iter-local \\
        ark:train.fst.1 ark:train.fea.1 ark:train.fst.2 ark:train.fea.2 \\
        old_mdl output_dir

Options:
  --acoustic_scale             : (float, default = $acoustic_scale)
                                 Scaling factor for acoustic likelihoods.
  --align_equal                : (boolean, default = $align_equal)
                                 Perform equal alignment instead of Viterbi
                                 alignment, typically used in the first
                                 iteration of the MLE training.
  --beam                       : (float, default = $beam)
                                 Decoding beam used in alignment.
  --careful                    : (boolean, default = $careful)
                                 If true, do 'careful' alignment, which is
                                 better at detecting alignment failure
                                 (involves loop to start of decoding graph).
  --clean                      : (boolean, default = $clean)
                                 Clean temporal accumulated statistics files
                                 after the MLE.
  --config                     : (string, default = \"\")
                                 Read options from this config file. Multiple
                                 config files can be specified.
  --min_gaussian_occupancy     : (float, default = $min_gaussian_occupancy)
                                 Minimum occupancy to update a Gaussian.
  --min_gaussian_weight        : (float, default = $min_gaussian_weight)
                                 Minimum Gaussian weight before we remove it.
  --min_variance               : (float, default = $min_variance)
                                 Variance floor (absolute variance).
  --overwrite                  : (boolean, default = $overwrite)
                                 If true, overwrite previously created files.
  --remove_low_count_gaussians : (boolean, default = $remove_low_count_gaussians)
                                 If true, remove Gaussians that fall below the
                                 floors.
  --retry_beam                 : (float, default = $retry_beam)
                                 Decoding beam for second try at alignment.
  --self_loop_scale            : (float, default = $self_loop_scale)
                                 Scale of self-loop versus non-self-loop log
                                 probs (relative to acoustics).
  --share_for_pdfs             : (boolean, default = $share_for_pdfs)
                                 If true, share all transition parameters where
                                 the states have the same p.d.f.
  --transition_floor           : (float, default = $transition_floor)
                                 Floor for transition probabilities.
  --transition_min_count       : (float, default = $transition_min_count)
                                 Minimum count required to update transitions
                                 from a state.
  --transition_scale           : (float, default = $transition_scale)
                                 Transition-probability scale (relative to
                                 acoustics).
  --update_flags               : (string, default = \"$update_flags\")
                                 Which GMM parameters to update: subset of mvwt.
";
. "${SDIR}/parallel-kaldi-cmd-parse.inc.sh" || \
    error "Sourcing file \"${SDIR}/parallel-kaldi-cmd-parse.inc.sh\"";
[ $# -eq 0 ] && echo "$help_message" >&2 && exit 1;

fsts=();
feas=();
while [ $# -gt 2 ]; do fsts+=("$1"); feas+=("$2"); shift 2; done;
[ ${#fsts[@]} -ne ${#feas[@]} ] && \
    error "The number of training FST and feature files does not match";
[ ${#fsts[@]} -lt 1 ] && \
    error "You must specify at least one training FST and feature file";
[ $# -ne 2 ] && error "Wrong number of arguments. Check the usage with --help";
old_mdl="$1";
wdir="$2";

check_execs bc align-equal-compiled gmm-align-compiled gmm-acc-stats-ali \
    gmm-est gmm-sum-accs;
check_files "$old_mdl";
make_dirs "$wdir";

# Check option values
[ "$(echo "$acoustic_scale >= 0.0" | bc -l)" = 1 ] || \
    error "--acoustic_scale must be greater than or equal to 0.0!";
[ "$(echo "$beam > 0.0" | bc -l)" = 1 ] || \
    error "--beam must be greater than 0.0!";
[ "$(echo "$min_gaussian_occupancy >= 0.0" | bc -l)" = 1 ] || \
    error "--min_gaussian_occupancy must be greater than or equal to 0.0!";
[ "$(echo "$min_gaussian_weight > 0.0" | bc -l)" = 1 ] || \
    error "--min_gaussian_weight must be greater than 0.0!";
[ "$(echo "$min_variance > 0.0" | bc -l)" = 1 ] || \
    error "--min_variance must be greater than 0.0!";
[ "$(echo "$retry_beam >= 0.0" | bc -l)" = 1 ] || \
    error "--retry_beam must be greater than or equal to 0.0!";
[ "$(echo "$self_loop_scale >= 0.0" | bc -l)" = 1 ] || \
    error "--self_loop_scale must be greater than or equal to 0.0!";
[ "$(echo "$transition_floor >= 0.0" | bc -l)" = 1 ] || \
    error "--transition_floor must be greater than or equal to 0.0!";
[ "$(echo "$transition_min_count >= 0.0" | bc -l)" = 1 ] || \
    error "--transition_min_count must be greater than or equal to 0.0!";
[ "$(echo "$transition_scale >= 0.0" | bc -l)" = 1 ] || \
    error "--transition_scale must be greater than or equal to 0.0!";

# If there is a trained model and pdf occupation counts in the output directory
# and --overwrite = false, then we are done: the script can exit safely.
[ -s "${wdir}/mdl" -a -s "${wdir}/occ" -a $overwrite = false ] && exit 0;

# Launch background processes to perform forced alignment and statistics
# accumulation. Each process write its own output and log file in the working
# directory. Process are only launched if the corresponding output file is
# not empty, or --overwrite = true.
bg_jobs=();
accs=();
for i in $(seq 0 $[${#fsts[@]} - 1]); do
    acc="${wdir}/acc.$i";
    log="${wdir}/gmm-acc-stats-ali.$i.log";
    accs+=("$acc");
    [ -s "$acc" -a $overwrite = false ] || {
	if [ $align_equal = true ]; then
	    ( align-equal-compiled "${fsts[i]}" "${feas[i]}" ark:- \
		gmm-acc-stats-ali "$old_mdl" "${feas[i]}" ark:- "$acc" ) \
		&> "$log" &
	    bg_jobs+=("$!");
	else
	    ( gmm-align-compiled \
		--acoustic_scale=$acoustic_scale --beam=$beam \
		--careful=$careful --retry_beam=$retry_beam \
		--self_loop_scale=$self_loop_scale \
		--transition_scale=$transition_scale "$old_mdl" "${fsts[i]}" \
		"${feas[i]}" ark:- | \
		gmm-acc-stats-ali "$old_mdl" "${feas[i]}" ark:- "$acc" ) \
		&> "$log" &
	    bg_jobs+=("$!");
	fi;
    }
done;

# Wait for all processes running in the background.
any_failure=0;
for i in $(seq 0 $[${#bg_jobs[@]} - 1]); do
    log="${wdir}/gmm-acc-stats-ali.$i.log";
    wait ${bg_jobs[i]} || ( \
	error_continue "Worker computing statistics failed, see \"$log\"" && \
	any_failure=1 );
done;
[ $any_failure -eq 0 ] || exit 1;

# Perform MLE of the parameters from the statistics computed before and write
# a new model to $wdir/mdl.
[ -s "${wdir}/mdl" -a -s "${wdir}/occ" -a "${overwrite}" = false ] || \
    gmm-est --min-gaussian-occupancy=$min_gaussian_occupancy \
    --min-gaussian-weight=$min_gaussian_weight \
    --min-variance=$min_variance \
    --remove-low-count-gaussians=$remove_low_count_gaussians \
    --share-for-pdfs=$share_for_pdfs \
    --transition-floor=$transition_floor \
    --transition-min-count=$transition_min_count \
    --update-flags="$update_flags" --write-occs="${wdir}/occ" \
    "$old_mdl" "gmm-sum-accs - ${accs[@]}|" "${wdir}/mdl" \
    &> "${wdir}/gmm-est.log" || \
    error "Maximum Likelihood Estimation failed, see \"${wdir}/gmm-est.log\"";

# Clean temporal files with the accumulated statistics (optionally) and exit.
[ $clean = false ] || rm -f ${accs[@]} || exit 1;
exit 0;
