#!/bin/bash
set -e;
export LC_NUMERIC=C;

### Script directory.
SDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
### Load useful functions.
. "${SDIR}/parallel-kaldi-functions.inc.sh" || ( \
    echo "ERROR: Sourcing file \"${SDIR}/parallel-kaldi-functions.inc.sh\"" >&2 && exit 1);

# Options for gmm-fb-compiled
acoustic_scale=1.0;
align_equal=false;
beam_backward=10000;
beam_forward=10000;
delta=0.000976562
self_loop_scale=1.0;
transition_scale=1.0;
# Options for gmm-est
min_gaussian_occupancy=10;
min_gaussian_weight=0.00001;
min_variance=0.001;
remove_low_count_gaussians=true;
share_for_pdfs=false;
transition_floor=0.01;
transition_min_count=5;
update_flags=mvwt;
# QSub options
qsub=false;
qsub_opts="-l h_rt=24:00:00,h_vmem=4G";
# Options for this script
overwrite=false;
clean=false;
help_message="
Usage: parallel-kaldi-fb-mle-iter [options] fst1_rspec fea1_rspec
                                  [fst2_rspec fea2_rspec ...]
                                  old_mdl work_dir

Description:
   Perform Maximum Likelihood Estimation of GMM-based acoustic model using
   the statistics from the Baum-Welch algorithm (Forward-Backward).

   e.g: parallel-kaldi-fb-mle-iter \\
        ark:train.fst.1 ark:train.fea.1 ark:train.fst.2 ark:train.fea.2 \\
        old_mdl output_dir

Options:
  --acoustic_scale             : (float, default = $acoustic_scale)
                                 Scaling factor for acoustic likelihoods.
  --align_equal                : (boolean, default = $align_equal)
                                 Perform equal alignment in the first iteration of
                                 the MLE training.
  --beam_backward              : (float, default = $beam_backward)
                                 Beam prunning threshold during backward pass.
  --beam_forward               : (float, default = $beam_forward)
                                 Beam prunning threshold during forward pass.
  --clean                      : (boolean, default = $clean)
                                 Clean temporal accumulated statistics files
                                 after the MLE.
  --config                     : (string, default = \"\")
                                 Read options from this config file. Multiple
                                 config files can be specified.
  --delta                      : (float, default = $delta)
                                 Comparison delta during Forward-Backward
                                 [see fstshortestdistance].
  --min_gaussian_occupancy     : (float, default = $min_gaussian_occupancy)
                                 Minimum occupancy to update a Gaussian.
  --min_gaussian_weight        : (float, default = $min_gaussian_weight)
                                 Minimum Gaussian weight before we remove it.
  --min_variance               : (float, default = $min_variance)
                                 Variance floor (absolute variance).
  --overwrite                  : (boolean, default = $overwrite)
                                 If true, overwrite previously created files.
  --qsub                       : (boolean, default = $qsub)
                                 If true, run jobs in a cluster using qsub
                                 instead of the local machine.
  --qsub_opts                  : (string, default = \"$qsub_opts\")
                                 Options passed to the qsub command. Note:
                                 -cwd and -t are automatically set.
  --remove_low_count_gaussians : (boolean, default = $remove_low_count_gaussians)
                                 If true, remove Gaussians that fall below the
                                 floors.
  --self_loop_scale            : (float, default = $self_loop_scale)
                                 Scale of self-loop versus non-self-loop log
                                 probs (relative to acoustics).
  --share_for_pdfs             : (boolean, default = $share_for_pdfs)
                                 If true, share all transition parameters where
                                 the states have the same p.d.f.
  --transition_floor           : (float, default = $transition_floor)
                                 Floor for transition probabilities.
  --transition_min_count       : (float, default = $transition_min_count)
                                 Minimum count required to update transitions
                                 from a state.
  --transition_scale           : (float, default = $transition_scale)
                                 Transition-probability scale (relative to
                                 acoustics).
  --update_flags               : (string, default = \"$update_flags\")
                                 Which GMM parameters to update: subset of mvwt.
";
. "${SDIR}/parallel-kaldi-cmd-parse.inc.sh" || \
    error "Sourcing file \"${SDIR}/parallel-kaldi-cmd-parse.inc.sh\"";
[ $# -eq 0 ] && echo "$help_message" >&2 && exit 1;

fsts=();
feas=();
while [ $# -gt 2 ]; do fsts+=("$1"); feas+=("$2"); shift 2; done;
[ ${#fsts[@]} -ne ${#feas[@]} ] && \
    error "The number of training FST and feature files does not match";
[ ${#fsts[@]} -lt 1 ] && \
    error "You must specify at least one training FST and feature file";
[ $# -ne 2 ] && error "Wrong number of arguments. Check the usage with --help";
old_mdl="$1";
wdir="$2";

check_execs bc align-equal-compiled gmm-fb-compiled gmm-acc-stats \
    gmm-est gmm-sum-accs qsub;
make_dirs "$wdir";

# Check option values
[ "$(echo "$acoustic_scale >= 0.0" | bc -l)" = 1 ] || \
    error "--acoustic_scale must be greater than or equal to 0.0!";
[ "$(echo "$beam_backward > 0.0" | bc -l)" = 1 ] || \
    error "--beam_backward must be greater than 0.0!";
[ "$(echo "$beam_forward > 0.0" | bc -l)" = 1 ] || \
    error "--beam_forward must be greater than 0.0!";
[ "$(echo "$min_gaussian_occupancy >= 0.0" | bc -l)" = 1 ] || \
    error "--min_gaussian_occupancy must be greater than or equal to 0.0!";
[ "$(echo "$min_gaussian_weight > 0.0" | bc -l)" = 1 ] || \
    error "--min_gaussian_weight must be greater than 0.0!";
[ "$(echo "$min_variance > 0.0" | bc -l)" = 1 ] || \
    error "--min_variance must be greater than 0.0!";
[ "$(echo "$self_loop_scale >= 0.0" | bc -l)" = 1 ] || \
    error "--self_loop_scale must be greater than or equal to 0.0!";
[ "$(echo "$transition_floor >= 0.0" | bc -l)" = 1 ] || \
    error "--transition_floor must be greater than or equal to 0.0!";
[ "$(echo "$transition_min_count >= 0.0" | bc -l)" = 1 ] || \
    error "--transition_min_count must be greater than or equal to 0.0!";
[ "$(echo "$transition_scale >= 0.0" | bc -l)" = 1 ] || \
    error "--transition_scale must be greater than or equal to 0.0!";

# If there is a trained model and pdf occupation counts in the output directory
# and --overwrite = false, then we are done: the script can exit safely.
[ -s "${wdir}/mdl" -a -s "${wdir}/occ" -a "$overwrite" = false ] && exit 0;

# In order to avoid scheduling jobs that won't do anything useful, check which
# statistics tasks were already completed, and schedule only those that were
# not.
pending_tasks=(); accs=();
for i in $(seq 1 ${#fsts[@]}); do
    acc="${wdir}/acc.$i";
    log="${wdir}/gmm-acc-stats.$i.log";
    accs+=("$acc");
    [ -s "$acc" -a "$overwrite" = false ] && \
        grep -q "Overall avg like" "$log" && continue;
    pending_tasks+=("$i");
    rm -f "$acc" "$log";
done;

if [ $qsub = true ]; then
    if [ ${#pending_tasks[@]} -gt 0 ]; then
        # SGE only admits continuous ranges, so redo all tasks between the
        # first pending and the latest.
        qsub_tasks="${pending_tasks[0]}-${pending_tasks[@]:(-1)}";
        qsub_script="$(mktemp)";
        (
            cat <<EOF
#!/bin/bash
#$ -cwd
#$ -t ${qsub_tasks}
#$ ${qsub_opts}
EOF
            for i in "${pending_tasks[@]}"; do
                acc="${wdir}/acc.$i";
                log="${wdir}/gmm-acc-stats.$i.log";
                if [ "$align_equal" = true ]; then
                    cat <<EOF
[ \${SGE_TASK_ID} -eq $i ] && {
  ( align-equal-compiled "${fsts[i-1]}" "${feas[i-1]}" ark:- | \
    gmm-acc-stats-ali "$old_mdl" "${feas[i-1]}" ark:- "$acc" ) &> "$log" || \
    exit 1;
  exit 0;
}
EOF
                else
                    cat <<EOF
[ \${SGE_TASK_ID} -eq $i ] && {
  ( gmm-fb-compiled \
    --acoustic-scale=$acoustic_scale \
    --beam-backward=$beam_backward --beam-forward=$beam_forward \
    --delta=$delta --self-loop-scale=$self_loop_scale \
    --transition-scale=$transition_scale "$old_mdl" \
    "${fsts[i-1]}" "${feas[i-1]}" ark:- | gmm-acc-stats "$old_mdl" \
    "${feas[i-1]}" ark:- "$acc" ) &> "$log" || exit 1;
  exit 0;
}
EOF
                fi;
            done
        ) > "$qsub_script";
        hold_jid="$(qsub -terse "$qsub_script"|tail -n1|sed 's/\..*$//g')" || \
            error "qsub job submission failed!";
    fi;
    # Hold next command to pending statistics accumulation?
    [ -z "$hold_jid" ] || hold_jid="-hold_jid $hold_jid";

    # Perform MLE of the parameters from the statistics computed before and
    # write a new model to $wdir/mdl.
    qsub_script="$(mktemp)";
    (
        cat <<EOF
#!/bin/bash
#$ -cwd
#$ ${qsub_opts}
#$ ${hold_jid}
gmm-est --min-gaussian-occupancy=$min_gaussian_occupancy \
  --min-gaussian-weight=$min_gaussian_weight --min-variance=$min_variance \
  --remove-low-count-gaussians=$remove_low_count_gaussians \
  --share-for-pdfs=$share_for_pdfs --transition-floor=$transition_floor \
  --transition-min-count=$transition_min_count --write-occs="${wdir}/occ" \
  --update-flags="$update_flags" "$old_mdl" "gmm-sum-accs - ${accs[*]}|" \
  "${wdir}/mdl" &> "${wdir}/gmm-est.log" || ( \
  echo "\$(date "+%F %T") [${0##*/}:${LINENO}] ERROR: Maximum Likelihood Estimation failed, see \"${wdir}/gmm-est.log\"" && exit 1 );

# Clean temporal files with the accumulated statistics (optionally) and exit.
[ $clean = false ] || rm -f ${accs[@]} || exit 1;
exit 0;
EOF
    ) > "$qsub_script";
    qsub -terse "$qsub_script" | tail -n1 | sed 's/\..*$//g' || \
        error "qsub job submission failed!";
else
    bg_jobs=();
    for i in "${pending_tasks[@]}"; do
        acc="${wdir}/acc.$i";
        log="${wdir}/gmm-acc-stats.$i.log";
	if [ $align_equal = true ]; then
	    ( align-equal-compiled "${fsts[i-1]}" "${feas[i-1]}" ark:- | \
		gmm-acc-stats-ali "$old_mdl" "${feas[i-1]}" ark:- "$acc" ) \
		&> "$log" &
	    bg_jobs+=("$!");
	else
            ( gmm-fb-compiled \
                --acoustic-scale=$acoustic_scale \
                --beam-backward=$beam_backward --beam-forward=$beam_forward \
                --delta=$delta --self-loop-scale=$self_loop_scale \
                --transition-scale=$transition_scale "$old_mdl" \
                "${fsts[i-1]}" "${feas[i-1]}" ark:- | \
                gmm-acc-stats "$old_mdl" "${feas[i-1]}" ark:- "$acc" ) \
                &> "$log" &
	    bg_jobs+=("$!");
	fi;
    done;
    # Wait for all processes running in the background.
    any_failure=0;
    for i in $(seq 1 ${#bg_jobs[@]}); do
        log="${wdir}/gmm-acc-stats.$i.log";
        wait ${bg_jobs[i-1]} || ( \
	    error_continue "Worker failed, see \"$log\"" && any_failure=1 );
    done;
    [ $any_failure -eq 0 ] || exit 1;
    # Perform MLE of the parameters from the statistics computed before and
    # write a new model to $wdir/mdl.
    gmm-est --min-gaussian-occupancy=$min_gaussian_occupancy \
        --min-gaussian-weight=$min_gaussian_weight \
        --min-variance=$min_variance \
        --remove-low-count-gaussians=$remove_low_count_gaussians \
        --share-for-pdfs=$share_for_pdfs \
        --transition-floor=$transition_floor \
        --transition-min-count=$transition_min_count \
        --update-flags="$update_flags" --write-occs="${wdir}/occ" \
        "$old_mdl" "gmm-sum-accs - ${accs[*]}|" "${wdir}/mdl" \
        &> "${wdir}/gmm-est.log" || error \
        "Maximum Likelihood Estimation failed, see \"${wdir}/gmm-est.log\"";
    # Clean temporal files with the accumulated statistics (optionally) and
    # exit.
    [ $clean = false ] || rm -f ${accs[@]} || exit 1;
fi;

exit 0;
